#!/usr/bin/env python
################################ Tray 0 ##############################
#   
#   Code automatically generated by iceprod translator 
#   
#   Generator functions for IceTop
#   
######################################################################
import os,sys,re
from os.path import expandvars

from I3Tray import *
from .. import ipmodule, segments
from icecube import icetray, dataclasses, dataio


class AirShowerGenerator(ipmodule.ParsingModule):
   """
   Wrapper runs GenerateAirShowers Tray segment
   """
   def __init__(self):
        ipmodule.ParsingModule.__init__(self)
        self.AddParameter('nshowers','Number of generated CR showers',1)
        self.AddParameter('procnum','process number',0)
        self.AddParameter('seed','RNG seed',1)
        self.AddParameter('nproc','Number of processes for (RNG)',1)
        self.AddParameter('gcdfile','GeoCalibDetStatus filename','')
        self.AddParameter('outputfile','Output filename','corsika.i3')
        self.AddParameter('inputfilelist',"Input filename list",[])
        self.AddParameter('summaryfile','XMLSummary filename','summary.xml')
        self.AddParameter('mjd','MJD to set the event times',55697)
        self.AddParameter("radius","Cylinder radius",500)
        self.AddParameter("length","Cylinder length",1000)
        self.AddParameter("dump","Dump frame contentes to screen",False)
        

   def Execute(self,stats):
        if not ipmodule.IPBaseClass.Execute(self,stats): return 0
        import icecube.icetray

        # Instantiate a tray 
        tray = I3Tray()
        from icecube import icetray
        from icecube import phys_services, sim_services

        # Instantiate a SummaryService if required
        tray.AddService('I3XMLSummaryServiceFactory','summaryfile', outputfilename=self.summaryfile)
 
        # set up a random number generator
        randomService = phys_services.I3SPRNGRandomService( 
        	seed = self.seed,
        	nstreams = self.nproc*2,
        	streamnum = self.procnum*2)

        # a special random service for muon propagation
        randomServiceForPropagators = phys_services.I3SPRNGRandomService(
        	seed = self.seed,
        	nstreams = self.nproc*2,
        	streamnum = self.procnum*2+1)

        # re-use the same RNG for modules that need it on the context
        tray.context['I3RandomService'] = randomService

        tray.AddSegment(segments.GenerateAirShowers, "GenerateAtmosphericNeutrinos",
	       NEvents = self.nshowers,
	       Files = self.inputfilelist,
	       GCDFile = self.gcdfile,
	       CylinderRadius = self.radius, CylinderHeight = self.length,
	       SimulateIceTop = True,
        )
        tray.Add('Rename', Keys=['I3MCTree', 'I3MCTree_preMuonProp'])
        tray.AddSegment(segments.PropagateMuons, "PropagateMuons",
                        RandomService = randomServiceForPropagators)

        if self.dump:
           tray.AddModule("Dump","dump")
        tray.AddModule("I3Writer","writer", filename = self.outputfile, streams =[icetray.I3Frame.DAQ] )
        tray.AddModule("TrashCan","trashcan")

        # Execute the Tray
        tray.Execute()
        tray.Finish()
        del tray
       

class IceTopShowerGenerator(ipmodule.ParsingModule):
   """
   Wrapper runs GenerateIceTopShowers Tray segment
   """
   def __init__(self):
        ipmodule.ParsingModule.__init__(self)
        self.AddParameter('samples','Number of samples of the same CORSIKA shower',1)
        self.AddParameter('procnum','process number',None)
        self.AddParameter('seed','RNG seed',1)
        self.AddParameter('nproc','Number of processes for (RNG)',None)
        self.AddParameter('gcdfile','GeoCalibDetStatus filename','')
        self.AddParameter('outputfile','Output filename','corsika.i3')
        self.AddParameter('inputfilelist',"Input filename list",[])
        self.AddParameter('summaryfile','XMLSummary filename','summary.xml')
        self.AddParameter('mjd','MJD to set the event times',55697)
        self.AddParameter('RunId','RunId (or dataset)',None)
        self.AddParameter("x","Core is place in a disk around (x,y)", 0.)
        self.AddParameter("y","Core is place in a disk around (x,y)", 0.)
        self.AddParameter("r","The radius of the disk whithin wich the core is randomly chosen (usually energy-dependent, something like 800 + 600*(log10(E/GeV) - 5) meters", 0.)
        self.AddParameter("unthin_r","Radius of sampling region for CORSIKA unthinning. Usually energy-dependent, something like -693.4 + 360.4*log10(E/GeV) -60.4*(log10(E/GeV))^2 +3.34*(log10(E/GeV))^3 (hey, don't ask me...)",
                          0.*I3Units.meter)
        self.AddParameter('propagate_muons', 'Propagate muons for ice surface to IceCube', True)
        self.AddParameter("dump","Dump frame contentes to screen",False)
        self.AddParameter('tank_response','g4 or param. Use Geant4 or parametrized propagation', 'g4')
        self.AddParameter("tank_sampling_radius", 
                          "default 25 m (for standard MC, for thinned, should be larger or equal than UnThinRadius)",
                          25.*I3Units.meter)
        self.AddParameter("raise_observation_level",
                          "Tweak the altitude (in meters) where corsika particles are injected (just in case the corsika observation plane is below the top of the snow)",
                          0.)

   def Execute(self,stats):
        if not ipmodule.IPBaseClass.Execute(self,stats): return 0
        import icecube.icetray

        # first check some variables that might need to be set
        try:
           dataset = int(self.parser.parse("$args(dataset)"))
        except:
           dataset = 0
        if self.procnum is None:
           try:    self.procnum = int(self.parser.parse("$args(procnum)"))
           except: self.procnum = 0
        if self.nproc is None:
           try:    self.nproc = int(self.parser.parse("$args(nproc)"))
           except: self.nproc = 1

        if self.runid is None:
           import math
           runid = int(10**math.ceil(math.log10(self.nproc))*dataset + self.procnum)
        else:
           runid = self.runid
           
        # Instantiate a tray 
        tray = I3Tray()
        from icecube import icetray
        from icecube import phys_services, sim_services

        # Instantiate a SummaryService if required
        tray.AddService('I3XMLSummaryServiceFactory','summaryfile', outputfilename=self.summaryfile)
        
        # configure the random number generator
        rngstate    = "rng.state"
        if not os.path.exists(rngstate): 
           rngstate = ''
           print("Warning: no RNG state found. Using seed instead.")
    
        # If I create the service in python insteado of with AddService, the destructor never gets called and the state is not saved at the end of the run
        tray.AddService("I3SPRNGRandomServiceFactory","random",
                        Seed = self.seed,
                        StreamNum = self.procnum,
                        NStreams = self.nproc,
                        instatefile = rngstate,
                        outstatefile = 'rng.state',
                        )

        # THE THING
        tray.AddSegment(segments.GenerateIceTopShowers, "GenerateIceTopShowers",
                        NSamples = self.samples,
                        Files = self.inputfilelist,
                        GCDFile = self.gcdfile,
                        x=self.x, y=self.y, r=self.r*I3Units.meter, 
                        TankResponse=self.tank_response,
                        TankSamplingRadius = self.tank_sampling_radius,
                        UnthinRadius=self.unthin_r,
                        RunID=runid,
                        RaiseObservationLevel=self.raise_observation_level*I3Units.m
                        )

        if self.propagate_muons:
           # segments.PropagateMuons requires a random service, I would prefer to use the same one used above.
           # I could also set the state of randomService to the state of tray.context['I3RandomService'] before running this segment.
           randomService = phys_services.I3SPRNGRandomService( 
              seed = self.seed,
              nstreams = self.nproc,
              streamnum = self.procnum)
           
           tray.Add('Rename', Keys=['I3MCTree', 'I3MCTree_preMuonProp'])
           tray.AddSegment(segments.PropagateMuons, "PropagateMuons",
                           RandomService = randomService)

        
        from ..util import PrintContext
        tray.AddModule(PrintContext,"ctx")
        if self.dump:
           tray.AddModule("Dump","dump")
        tray.AddModule("I3Writer","writer", filename = self.outputfile, streams =[icetray.I3Frame.DAQ] )
        tray.AddModule("TrashCan","trashcan")

        # Execute the Tray
        tray.Execute()
        tray.Finish()

        # Free memory
        del tray
        return 0
