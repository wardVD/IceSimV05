#!/usr/bin/env python
################################ Tray 0 ##############################
#   
#   Code automatically generated by iceprod translator 
#   on 2009-07-21T16:33:23 
#   
######################################################################
import os,sys
from os.path import expandvars

from I3Tray import *
from .. import ipmodule


# Instantiate parameters expression parser 

def boolcast(s): return s not in ["False","0","","[]"]
double = float

def upload_log(tray,logfile,destination,emul,suffix,parser):
    if os.path.exists(logfile):
       mod0 = "compress_"+os.path.basename(logfile)+suffix
       mod1 = "upload_"+os.path.basename(logfile)+suffix
           
       tray.AddModule("fileutils.CompressFile",mod0)( 
           ('infile',logfile),
           ('outfile',logfile+".gz")
       )
       tray.AddModule("gsiftp.URLCopy",mod1)( 
           ('source',"file:"+logfile+".gz"),
           ("destination",destination),
           ("emulate",emul)
       )
       tray.SetParser(mod0,parser)
       tray.SetParser(mod1,parser)


class GridFTP(ipmodule.IPBaseClass):
   """
   Wrapper class that copy files to storage units with GridFTP
   """
   def __init__(self):
        ipmodule.IPBaseClass.__init__(self)

        self.AddParameter('gcdfile','GeoCalibDetStatus filename','$steering(gcdfile_09)')
        self.AddParameter('outputfile','Output physics filename','$steering(outfile)')
        self.AddParameter('summaryfile','summary file','$steering(summaryfile)')
        self.AddParameter('histosfile','BasicHistos file','sanityfile.pkl')
        self.AddParameter('target','Destination of files in Data Warehouse','$steering(TARGET::2009)')
        self.AddParameter('emulate','Write XML inventory instead of transfering data',False)
        self.AddParameter('EnableBasicHistos','Boolean flag to enable transfer of basic histos',False)
        self.AddParameter('HistosPrescale','basic histos prescale',10)

   def Execute(self,stats):
        if not ipmodule.IPBaseClass.Execute(self,stats): return 0

        gcdfile    = self.GetParameter('gcdfile')
        gcdfile    = self.parser.parse(gcdfile) #in case we are using default

        outputfile    = self.GetParameter('outputfile')
        outputfile    = self.parser.parse(outputfile) #in case we are using default

        summary    = self.GetParameter('summaryfile')
        try:
            summary    = self.parser.parse(summary) #in case we are using default
        except:
            summary = None

        histosfile    = self.GetParameter('histosfile')
        histosfile    = self.parser.parse(histosfile) #in case we are using default
        histosfile_output = self.parser.parse('sanityhistos.$args(dataset).$args(procnum).pkl')

        target    = self.GetParameter('target')
        target    = self.parser.parse(target) #in case we are using default
        if type(target) is list:
           import random
           target = random.choice(target)

        emulate   = self.GetParameter('emulate')

        basicHisto = self.GetParameter('EnableBasicHistos')
        histoPre   = self.GetParameter('HistosPrescale')

        from iceprod.modules import gsiftp
        from iceprod.core.dataclasses import I3PostTray

        post    = I3PostTray()
        job     = int(self.parser.parse("$args(procnum)"))
        key     = self.parser.parse("$args(key)")
        dataset = int(self.parser.parse("$args(dataset)"))
        moniurl = self.parser.parse("$args(url)")
        localcp = boolcast(self.parser.parse("$system(localcp)"))
        
        if summary and os.path.exists(summary):
            # Upload summary file to main target without tracking
            post.AddModule("gsiftp.URLCopy","uploadsummary")(
               ("execute",not job % 10), # prescale
               ("source","file:%s" % os.path.join(os.getcwd(),summary)),
               ("destination",target),
               ("emulate",emulate),
            )

        # Upload main physics output file to main target with tracking 
        post.AddModule("gsiftp.TrackURLCopy","uploadphysics")( 
           ("execute",True), 
           ("source","file:%s" % os.path.join(os.getcwd(),outputfile)),
           ("destination",target), 
           ("monitorURL",moniurl), 
           ("dataset",dataset), 
           ("job",job), 
           ("key",key),
           ("emulate",emulate),
        )

        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadphysics2")(
           ("execute",localcp), 
           ("source","file:%s" % os.path.join(os.getcwd(),outputfile)),
           ("destination",self.parser.parse("$system(targeturl)")),
           ("emulate",emulate),
        )

        # Upload GCD file to main target with tracking
        post.AddModule("gsiftp.TrackURLCopy","uploadgcd")(
           ("execute",not job % 1000), # prescale 
           ("source","file:%s" % os.path.join(os.getcwd(),gcdfile)), 
           ("destination",target), 
           ("monitorURL",moniurl), 
           ("dataset",dataset), 
           ("job",job), 
           ("key",key),
           ("emulate",emulate),
        )

        # Upload GCD file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadgcd2")(
           ("execute",localcp and not job % 1000), # prescale 
           ("source","file:%s" % os.path.join(os.getcwd(),gcdfile)),
           ("destination",self.parser.parse("$system(targeturl)")),
           ("emulate",emulate),
        )

        # Upload basichistos file to main target without tracking
        post.AddModule("gsiftp.URLCopy","uploadhisto")( 
           ("execute",basicHisto and histoPre and not job % histoPre), # prescale
           ("source","file:%s" % os.path.join(os.getcwd(),histosfile)),
           ("destination",os.path.join(target,'histos',histosfile_output)),
           ("emulate",emulate),
        )

        if summary and os.path.exists(summary):
            post.SetParser('uploadsummary',self.parser)
        post.SetParser('uploadphysics',self.parser)
        post.SetParser('uploadphysics2',self.parser)
        post.SetParser('uploadgcd',self.parser)
        post.SetParser('uploadgcd2',self.parser)
        post.SetParser('uploadhisto',self.parser)

        # Execute the PostTray
        post.Execute()
        return 0


class FilterGridFTP(ipmodule.IPBaseClass):
   """
   Wrapper class that copy files to storage units with GridFTP
   """
   def __init__(self):
        ipmodule.IPBaseClass.__init__(self)

        self.AddParameter('gcdfile','GeoCalibDetStatus filename','$steering(gcdfile_09)')
        self.AddParameter('l1file','Output physics filename','$steering(FILTER::outfile_l1)_EHE.i3.gz')
        self.AddParameter('l2file','Output physics filename','$steering(FILTER::outfile_l2).i3.gz')
        self.AddParameter('summaryfile','summary file','$steering(summaryfile)')
        self.AddParameter('rootfile','Flat-ntuple root file','$steering(FILTER::outfile_l1).root')
        self.AddParameter('histofile','ProcHistos root file','$steering(FILTER::outfile_l1)_ProcHists.root')
        self.AddParameter('gapfile','Gaps text file','$steering(FILTER::outfile_l1)_gaps.txt')
        self.AddParameter('target1','Destination of Level 1 files in Data Warehouse','$steering(TARGET::2009_L1)')
        self.AddParameter('target2','Destination of Level 2 files in Data Warehouse','$steering(TARGET::2009_L2)')
        self.AddParameter('emulate','Write XML inventory instead of transfering data',False)
        self.AddParameter('EnableBasicHistos','Boolean flag to enable transfer of basic histos',False)
        self.AddParameter('production','Boolean flag to enable production-mode specific flags',True)
        self.AddParameter('dcorsfile','Output dcors filename','$steering(CORSIKA::infile)')
        self.AddParameter('target3','Destination of dcorsika files in Data Warehouse','$steering(TARGET::2009_DCORS)')
        self.AddParameter('KeepdCorsika','Boolean flag to enable transfer of dcorsika file',False)
        self.AddParameter('uploadlogs','Boolean flag to enable transfer of log files',True)
        

   def Execute(self,stats):
        if not ipmodule.IPBaseClass.Execute(self,stats): return 0

        gcdfile    = self.GetParameter('gcdfile')
        gcdfile    = self.parser.parse(gcdfile) #in case we are using default

        l1file    = self.GetParameter('l1file')
        l1file    = self.parser.parse(l1file) #in case we are using default

        l2file    = self.GetParameter('l2file')
        l2file    = self.parser.parse(l2file) #in case we are using default

        summary    = self.GetParameter('summaryfile')
        try:
            summary    = self.parser.parse(summary) #in case we are using default
        except:
            summary = None

        rootfile    = self.GetParameter('rootfile')
        rootfile    = self.parser.parse(rootfile) #in case we are using default

        dcorsfile   = self.GetParameter('dcorsfile')
        dcorsfile   = self.parser.parse(dcorsfile) #in case we are using default

        histofile    = self.GetParameter('histofile')
        histofile    = self.parser.parse(histofile) #in case we are using default

        gapfile    = self.GetParameter('gapfile')
        gapfile    = self.parser.parse(gapfile) #in case we are using default

        target1    = self.GetParameter('target1')
        target1    = self.parser.parse(target1) #in case we are using default
        if type(target1) is list:
           import random
           target1 = random.choice(target1)

        target2    = self.GetParameter('target2')
        target2    = self.parser.parse(target2) #in case we are using default
        if type(target2) is list:
           import random
           target2 = random.choice(target2)

        target3    = self.GetParameter('target3')
        target3    = self.parser.parse(target3) #in case we are using default
        if type(target3) is list:
           import random
           target3 = random.choice(target3)

        emulate   = self.GetParameter('emulate')

        basicHisto = self.GetParameter('EnableBasicHistos')

        keepdcors = self.GetParameter('KeepdCorsika')
        
        uploadlogs = self.GetParameter('uploadlogs')

        from iceprod.modules import gsiftp
        from iceprod.core.dataclasses import I3PostTray

        post    = I3PostTray()

        dataset = int(self.parser.parse("$args(dataset)"))
        localcp = boolcast(self.parser.parse("$system(localcp)"))
        job     = int(self.parser.parse("$args(procnum)"))
        prod    = self.GetParameter('production')

        local_target1 = self.parser.parse("$system(targeturl)")
        local_target2 = self.parser.parse("$system(targeturl)")
        local_target3 = self.parser.parse("$system(targeturl)")

        # production mode? 
        if prod:
           key     = self.parser.parse("$args(key)")
           moniurl = self.parser.parse("$args(url)")
        else:
           key     = ''
           moniurl = ''
           local_target1 = target2
           local_target2 = target2
           localcp = True

# ---------------------------------------------
        if summary and os.path.exists(summary):
            # Upload summary file to main target without tracking
            post.AddModule("gsiftp.URLCopy","uploadsummary")(
               ("execute", False), # prescale
               ("source","file:%s" % os.path.join(os.getcwd(),summary)),
               ("destination",target2),
               ("emulate",emulate),
            )
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadl1ehe")( 
              ("execute",False), 
              ("source","file:%s" % os.path.join(os.getcwd(),l1file)),
              ("destination",target1), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl1ehe2")(
           ("execute",False), 
           ("source","file:%s" % os.path.join(os.getcwd(),l1file)),
           ("destination",local_target1),
           ("emulate",emulate),
        )
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadl2i3")( 
              ("execute",prod),    # BECAUSE THIS DOESN'T WORK, TrackURLCopy will still try to set up a server with empty url
              ("source","file:%s" % os.path.join(os.getcwd(),l2file)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl2i32")(
           ("execute",localcp), 
           ("source","file:%s" % os.path.join(os.getcwd(),l2file)),
           ("destination",local_target2),
           ("emulate",emulate),
        )
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadl2root")( 
              ("execute",prod), 
              ("source","file:%s" % os.path.join(os.getcwd(),rootfile)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl2root2")(
           ("execute",localcp), 
           ("source","file:%s" % os.path.join(os.getcwd(),rootfile)),
           ("destination",local_target2),
           ("emulate",emulate),
        )
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if keepdcors:
            if prod:
                post.AddModule("gsiftp.TrackURLCopy","uploaddcors")( 
                    ("execute",prod), 
                    ("source","file:%s" % os.path.join(os.getcwd(),dcorsfile)),
                    ("destination",target3), 
                    ("monitorURL",moniurl), 
                    ("dataset",dataset), 
                    ("job",job), 
                    ("key",key),
                    ("emulate",emulate),
                    )

            # Upload main physics output file to local target without tracking
            post.AddModule("gsiftp.URLCopy","uploaddcors2")(
                ("execute",localcp), 
                ("source","file:%s" % os.path.join(os.getcwd(),dcorsfile)),
                ("destination",local_target3),
                ("emulate",emulate),
                )
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadl2histo")( 
              ("execute",False), 
              ("source","file:%s" % os.path.join(os.getcwd(),histofile)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl2histo2")(
           ("execute",False), 
           ("source","file:%s" % os.path.join(os.getcwd(),histofile)),
           ("destination",local_target2),
           ("emulate",emulate),
        )
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadl2gap")( 
              ("execute",False), 
              ("source","file:%s" % os.path.join(os.getcwd(),gapfile)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl2gap2")(
           ("execute",False), 
           ("source","file:%s" % os.path.join(os.getcwd(),gapfile)),
           ("destination",local_target2),
           ("emulate",emulate),
        )
# ---------------------------------------------
        # Upload GCD file to main target with tracking
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadgcd")(
              ("execute",prod and not job % 1000), # prescale 
              ("source","file:%s" % os.path.join(os.getcwd(),gcdfile)), 
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload GCD file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadgcd2")(
           ("execute",localcp and not job % 1000), # prescale 
           ("source","file:%s" % os.path.join(os.getcwd(),gcdfile)),
           ("destination",local_target2),
           ("emulate",emulate),
        )
# ---------------------------------------------
        if summary and os.path.exists(summary):
            post.SetParser('uploadsummary',self.parser)
        if prod:
           post.SetParser('uploadl1ehe',self.parser)
           post.SetParser('uploadl2root',self.parser)
           if keepdcors:
               post.SetParser('uploaddcors',self.parser)
           post.SetParser('uploadl2histo',self.parser)
           post.SetParser('uploadl2gap',self.parser)
           post.SetParser('uploadgcd',self.parser)
           post.SetParser('uploadl2i3',self.parser)

        post.SetParser('uploadl1ehe2',self.parser)
        post.SetParser('uploadl2i32',self.parser)
        post.SetParser('uploadl2root2',self.parser)
        if keepdcors:
            post.SetParser('uploaddcors2',self.parser)
        post.SetParser('uploadl2histo2',self.parser)
        post.SetParser('uploadl2gap2',self.parser)
        post.SetParser('uploadgcd2',self.parser)

        if uploadlogs:
            stdoutfile = expandvars("$ICEPROD_STDOUT")
            stderrfile = expandvars("$ICEPROD_STDERR")
            icetraylog = expandvars("$I3_TOPDIR/icetray.%06u.log" % job)
            corsikalog = self.parser.parse("$I3_TOPDIR/$steering(CORSIKA::infile).log")
            upload_log(post,stdoutfile,os.path.join(target2,"logs/"),emulate,"",self.parser)
            upload_log(post,stderrfile,os.path.join(target2,"logs/"),emulate,"",self.parser)
            upload_log(post,icetraylog,os.path.join(target2,"logs/"),emulate,"",self.parser)
            upload_log(post,corsikalog,os.path.join(target2,"logs/"),emulate,"",self.parser)

        # Execute the PostTray
        post.Execute()
        return 0

class IC79FilterGridFTP(ipmodule.IPBaseClass):
   """
   Wrapper class that copy files to storage units with GridFTP
   """
   def __init__(self):
        ipmodule.IPBaseClass.__init__(self)

        # No more separate L1 for IC79, new : optional : _IT and _IT.root
        self.AddParameter('gcdfile','GeoCalibDetStatus filename','$steering(gcdfile_10)')
        self.AddParameter('l2file','Output physics filename','$steering(FILTER::outfile_l2).i3.gz')
        self.AddParameter('itl2file','Output IceTop physics filename','$steering(FILTER::outfile_l2)_IT.i3.gz')
        self.AddParameter('summaryfile','summary file','$steering(summaryfile)')
        self.AddParameter('rootfile','Flat-ntuple root file','$steering(FILTER::outfile_l2).root')
        self.AddParameter('itrootfile','Flat-ntuple IceTop root file','$steering(FILTER::outfile_l2)_IT.root')
        self.AddParameter('histofile','ProcHistos root file','$steering(FILTER::outfile_l2)_ProcHists.root')
        self.AddParameter('gapfile','Gaps text file','$steering(FILTER::outfile_l2)_gaps.txt')
        self.AddParameter('slopfile','Slow Monopole files','$steering(FILTER::outfile_l2)_SLOP.i3.gz')
        self.AddParameter('target2','Destination of Level 2 files in Data Warehouse','$steering(TARGET::2010_L2)')
        self.AddParameter('localtarget2','Destination of Level 2 files locally','$system(targeturl)')
        self.AddParameter('emulate','Write XML inventory instead of transfering data',False)
        self.AddParameter('EnableBasicHistos','Boolean flag to enable transfer of basic histos',False)
        self.AddParameter('production','Boolean flag to enable production-mode specific flags',True)
        self.AddParameter('IceTopProduction','Boolean flag to enable IceTop production-mode specific flags',False)
        self.AddParameter('uploadlogs','Boolean flag to enable transfer of log files',True)

   def Execute(self,stats):
        if not ipmodule.IPBaseClass.Execute(self,stats): return 0

        gcdfile    = self.GetParameter('gcdfile')
        gcdfile    = self.parser.parse(gcdfile) #in case we are using default

        l2file    = self.GetParameter('l2file')
        l2file    = self.parser.parse(l2file) #in case we are using default

        itl2file    = self.GetParameter('itl2file')
        itl2file    = self.parser.parse(itl2file) #in case we are using default

        slopfile    = self.GetParameter('slopfile')
        slopfile    = self.parser.parse(slopfile) #in case we are using default

        summary    = self.GetParameter('summaryfile')
        try:
            summary    = self.parser.parse(summary) #in case we are using default
        except:
            summary = None

        rootfile    = self.GetParameter('rootfile')
        rootfile    = self.parser.parse(rootfile) #in case we are using default
        hdf5file     = rootfile.replace(".root",".h5")

        itrootfile    = self.GetParameter('itrootfile')
        itrootfile    = self.parser.parse(itrootfile) #in case we are using default
        ithdf5file    = itrootfile.replace(".root",".h5")

        histofile    = self.GetParameter('histofile')
        histofile    = self.parser.parse(histofile) #in case we are using default

        gapfile    = self.GetParameter('gapfile')
        gapfile    = self.parser.parse(gapfile) #in case we are using default

        target2    = self.GetParameter('target2')
        target2    = self.parser.parse(target2) #in case we are using default
        if type(target2) is list:
           import random
           target2 = random.choice(target2)

        localtarget2    = self.GetParameter('localtarget2')
        localtarget2    = self.parser.parse(localtarget2) #in case we are using default

        emulate   = self.GetParameter('emulate')

        basicHisto = self.GetParameter('EnableBasicHistos')

        from iceprod.modules import gsiftp
        from iceprod.core.dataclasses import I3PostTray

        post    = I3PostTray()

        dataset = int(self.parser.parse("$args(dataset)"))
        localcp = boolcast(self.parser.parse("$system(localcp)"))
        job     = int(self.parser.parse("$args(procnum)"))
        prod    = self.GetParameter('production')
        itprod    = self.GetParameter('IceTopProduction')
        
        uploadlogs = self.GetParameter('uploadlogs')

        #local_target2 = self.parser.parse("$system(targeturl)")
        local_target2 = localtarget2
        local_emulate = emulate
        if self.parser.sysopts.has_key('local_emulate'):
               local_emulate = boolcast(self.parser.parse("$system(local_emulate)"))

        # production mode? 
        if prod:
           key     = self.parser.parse("$args(key)")
           moniurl = self.parser.parse("$args(url)")
        else:
           key     = ''
           moniurl = ''
           local_target2 = target2
           localcp = True
           local_emulate = emulate

# ---------------------------------------------
        if summary and os.path.exists(summary):
            # Upload summary file to main target without tracking
            post.AddModule("gsiftp.URLCopy","uploadsummary")(
               ("execute", False), # prescale
               ("source","file:%s" % os.path.join(os.getcwd(),summary)),
               ("destination",target2),
               ("emulate",emulate),
            )
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        post.AddModule("gsiftp.TrackURLCopy","uploadl2i3")( 
              ("execute",prod),                                
              ("source","file:%s" % os.path.join(os.getcwd(),l2file)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload SLOP output file to main target with tracking 
        post.AddModule("gsiftp.TrackURLCopy","uploadl2slop")( 
              ("execute",prod and os.path.exists(os.path.join(os.getcwd(),slopfile))), 
              ("source","file:%s" % os.path.join(os.getcwd(),slopfile)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload main physics output file to local target without tracking
        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl2i32")(
           ("execute",localcp), 
           ("source","file:%s" % os.path.join(os.getcwd(),l2file)),
           ("destination",local_target2),
           ("emulate",local_emulate),
        )

# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if itprod:
           if prod:
              # Decided (CR-WG PhoneCall 23-02-2011) to not send _IT.i3 to data warehouse
              # Can be done later if wanted and still available disk space.
              post.AddModule("gsiftp.TrackURLCopy","uploaditl2i3")( 
                 ("execute",False),                                 
                 ("source","file:%s" % os.path.join(os.getcwd(),itl2file)),
                 ("destination",target2), 
                 ("monitorURL",moniurl), 
                 ("dataset",dataset), 
                 ("job",job), 
                 ("key",key),
                 ("emulate",emulate),
                 )

           # Upload main physics output file to local target without tracking
           post.AddModule("gsiftp.URLCopy","uploaditl2i32")(
              ("execute",localcp), 
              ("source","file:%s" % os.path.join(os.getcwd(),itl2file)),
              ("destination",local_target2),
              ("emulate",local_emulate),
              )
           
# ---------------------------------------------
        # Upload main physics output root file to main target with tracking 
        post.AddModule("gsiftp.TrackURLCopy","uploadl2root")( 
              ("execute",prod and os.path.exists(os.path.join(os.getcwd(),rootfile))), 
              ("source","file:%s" % os.path.join(os.getcwd(),rootfile)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),

              )
        # Upload main physics output hdf5 file to main target with tracking 
        post.AddModule("gsiftp.TrackURLCopy","uploadl2hdf5")( 
              ("execute",prod and os.path.exists(os.path.join(os.getcwd(),hdf5file))), 
              ("source","file:%s" % os.path.join(os.getcwd(),hdf5file)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )


        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl2root2")(
           ("execute",localcp and os.path.exists(os.path.join(os.getcwd(),rootfile))), 
           ("source","file:%s" % os.path.join(os.getcwd(),rootfile)),
           ("destination",local_target2),
           ("emulate",local_emulate),
        )

        # Upload main physics output file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadl2hdf52")(
           ("execute",localcp and os.path.exists(os.path.join(os.getcwd(),hdf5file))), 
           ("source","file:%s" % os.path.join(os.getcwd(),hdf5file)),
           ("destination",local_target2),
           ("emulate",local_emulate),
        )



# ---------------------------------------------
        # Upload main physics output root file to main target with tracking 
        if itprod:
           if prod:
              # Decided (CR-WG PhoneCall 23-02-2011) to not send _IT.root to data warehouse
              # Can be done later if wanted and still available disk space.
              post.AddModule("gsiftp.TrackURLCopy","uploaditl2root")( 
                 ("execute",False), 
                 ("source","file:%s" % os.path.join(os.getcwd(),itrootfile)),
                 ("destination",target2), 
                 ("monitorURL",moniurl), 
                 ("dataset",dataset), 
                 ("job",job), 
                 ("key",key),
                 ("emulate",emulate),
                 )
              post.AddModule("gsiftp.TrackURLCopy","uploaditl2hdf5")( 
                 ("execute",False), 
                 ("source","file:%s" % os.path.join(os.getcwd(),ithdf5file)),
                 ("destination",target2), 
                 ("monitorURL",moniurl), 
                 ("dataset",dataset), 
                 ("job",job), 
                 ("key",key),
                 ("emulate",emulate),
                 )



           # Upload main physics output file to local target without tracking
           post.AddModule("gsiftp.URLCopy","uploaditl2root2")(
              ("execute",localcp and os.path.exists(os.path.join(os.getcwd(),itrootfile))), 
              ("source","file:%s" % os.path.join(os.getcwd(),itrootfile)),
              ("destination",local_target2),
              ("emulate",local_emulate),
              )

            # Upload main physics output file to local target without tracking
           post.AddModule("gsiftp.URLCopy","uploaditl2root2")(
              ("execute",localcp and os.path.exists(os.path.join(os.getcwd(),ithdf5file))), 
              ("source","file:%s" % os.path.join(os.getcwd(),ithdf5file)),
              ("destination",local_target2),
              ("emulate",local_emulate),
              )
        
# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadl2histo")( 
              ("execute",prod and os.path.exists(os.path.join(os.getcwd(),histofile))), 
              ("source","file:%s" % os.path.join(os.getcwd(),histofile)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

# ---------------------------------------------
        # Upload main physics output file to main target with tracking 
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadl2gap")( 
              ("execute",prod and os.path.exists(os.path.join(os.getcwd(),gapfile))), 
              ("source","file:%s" % os.path.join(os.getcwd(),gapfile)),
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

# ---------------------------------------------
        # Upload GCD file to main target with tracking
        if prod:
           post.AddModule("gsiftp.TrackURLCopy","uploadgcd")(
              ("execute",prod and not job % 1000), # prescale 
              ("source","file:%s" % os.path.join(os.getcwd(),gcdfile)), 
              ("destination",target2), 
              ("monitorURL",moniurl), 
              ("dataset",dataset), 
              ("job",job), 
              ("key",key),
              ("emulate",emulate),
              )

        # Upload GCD file to local target without tracking
        post.AddModule("gsiftp.URLCopy","uploadgcd2")(
           ("execute",localcp and not job % 1000), # prescale 
           ("source","file:%s" % os.path.join(os.getcwd(),gcdfile)),
           ("destination",local_target2),
           ("emulate",local_emulate),
        )
# ---------------------------------------------
        if summary and os.path.exists(summary):
            post.SetParser('uploadsummary',self.parser)
        if prod:
           post.SetParser('uploadl2root',self.parser)
           post.SetParser('uploadl2histo',self.parser)
           post.SetParser('uploadl2gap',self.parser)
           post.SetParser('uploadgcd',self.parser)
           post.SetParser('uploadl2i3',self.parser)
           if itprod:
              post.SetParser('uploaditl2i3',self.parser)
              post.SetParser('uploaditl2root',self.parser)

        post.SetParser('uploadl2i32',self.parser)
        post.SetParser('uploadl2root2',self.parser)
        post.SetParser('uploadgcd2',self.parser)
        if itprod:
           post.SetParser('uploaditl2i32',self.parser)
           post.SetParser('uploaditl2root2',self.parser)

        if uploadlogs:
            stdoutfile = expandvars("$ICEPROD_STDOUT")
            stderrfile = expandvars("$ICEPROD_STDERR")
            icetraylog = expandvars("$I3_TOPDIR/icetray.%06u.log" % job)
            if self.parser.steering.parameters.has_key('CORSIKA::infile'):
               corsikalog = self.parser.parse("$I3_TOPDIR/$steering(CORSIKA::infile).log")
               upload_log(post,corsikalog,os.path.join(target2,"logs/"),emulate,"",self.parser)
            upload_log(post,stdoutfile,os.path.join(target2,"logs/"),emulate,"",self.parser)
            upload_log(post,stderrfile,os.path.join(target2,"logs/"),emulate,"",self.parser)
            upload_log(post,icetraylog,os.path.join(target2,"logs/"),emulate,"",self.parser)
            if localcp:
                upload_log(post,stdoutfile,os.path.join(localtarget2,"logs/"),local_emulate,"_2",self.parser)
                upload_log(post,stderrfile,os.path.join(localtarget2,"logs/"),local_emulate,"_2",self.parser)
                upload_log(post,icetraylog,os.path.join(localtarget2,"logs/"),local_emulate,"_2",self.parser)
                upload_log(post,corsikalog,os.path.join(localtarget2,"logs/"),local_emulate,"_2",self.parser)
            
        # Execute the PostTray
        post.Execute()
        return 0

class IC86v1FilterGridFTP(IC79FilterGridFTP):

   def __init__(self):
        ipmodule.IPBaseClass.__init__(self)
        self.AddParameter('gcdfile','GeoCalibDetStatus filename','$steering(gcdfile_10)')
        self.AddParameter('l2file','Output physics filename','$steering(FILTER::outfile_l2).i3.bz2')
        self.AddParameter('itl2file','Output IceTop physics filename','$steering(FILTER::outfile_l2)_IT.i3.bz2')
        self.AddParameter('summaryfile','summary file','$steering(summaryfile)')
        self.AddParameter('rootfile','Flat-ntuple root file','$steering(FILTER::outfile_l2).root')
        self.AddParameter('itrootfile','Flat-ntuple IceTop root file','$steering(FILTER::outfile_l2)_IT.root')
        self.AddParameter('histofile','ProcHistos root file','$steering(FILTER::outfile_l2)_ProcHists.root')
        self.AddParameter('gapfile','Gaps text file','$steering(FILTER::outfile_l2)_gaps.txt')
        self.AddParameter('slopfile','Slow Monopole files','$steering(FILTER::outfile_l2)_SLOP.i3.bz2')
        self.AddParameter('target2','Destination of Level 2 files in Data Warehouse','$steering(TARGET::2010_L2)')
        self.AddParameter('localtarget2','Destination of Level 2 files locally','$system(targeturl)')
        self.AddParameter('emulate','Write XML inventory instead of transfering data',False)
        self.AddParameter('EnableBasicHistos','Boolean flag to enable transfer of basic histos',False)
        self.AddParameter('production','Boolean flag to enable production-mode specific flags',True)
        self.AddParameter('IceTopProduction','Boolean flag to enable IceTop production-mode specific flags',False)
        self.AddParameter('uploadlogs','Boolean flag to enable transfer of log files',True)

